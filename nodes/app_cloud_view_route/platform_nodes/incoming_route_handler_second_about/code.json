{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // simple multi-page: INPUT.data.req.path\n      \n      // let htmlHeader = await renderPartial();\n      let htmlMain1 = '';\n      let htmlMain2 = '';\n      \n\nlet md1 = `\n### About   \n\nThis page shows how to lookup a decentralized route's data (such as *second://someusername/mydocument*). \n\n---- \n`;\nlet md2 = `\n\n#### How do I lookup a username and route? \n\nFollowing is pseudo-code for a sample route. The [/view](https://viewsecondroute.com/view/second://testblah00011/ok2) page (instead of the \"/raw\" prefix) for any route on this domain any also be inspected (all lookup is done on the frontend). \n\n\\`\\`\\` \n\nRoute: \"second://sam:taco@TestUser123/name/home\" \n\n// Base variables from route \nnetwork: \"second\" // (public Stellar mainnet) \nbaseIdentity: \"TestUser123\" \nsubName: \"sam\" \npassword: \"taco\" \nroutePath: \"name/home\" // (omits prefixed \"/\")\n\n// Transform variables (normalize) \nbaseIdentity = \"testuser123\" // baseIdentity.normalize('NFKC').toLowerCase()\nusernameSeed = SHA256(baseIdentity) // as a buffer or array \npairForIdentity = StellarSdk.Keypair.fromRawEd25519Seed( usernameSeed );\nlookupPathHash = HexValue(SHA256(\"testuser123|sam|taco|name/home\")) // \\`baseIdentity|subName|password|routePath\\` \n\n// Lookup identity on Stellar network \nusernameAccount = StellarServer.loadAccount( pairForIdentity.publicKey )\n\n// Lookup data for route \nrouteIpfsHash = usernameAccount.loadData( {key: lookupPathHash} )\n\n// Route data is available at https://ipfs.io/ipfs/{routeIpfsHash} (or any IPFS portal) \n \n\\`\\`\\`\n\n<br />\n\n#### How do I register an identity/username? \n\nOwning a username is as simple as claiming the username address (first-come-first-served) and adding your private address for futher changes (\"multi-sig\"). \n\n\\`\\`\\` \n\nbaseIdentity: \"TestUser123\" // username to register\npasswordForAccount: \"your S.... password here\" // your password/private key of source address \n\n// Normalize \nbaseIdentity = \"testuser123\" // baseIdentity.normalize('NFKC').toLowerCase()\n\npairForPassword = StellarSdk.Keypair.fromSecret( passwordForAccount ); // must already have Stellar XLM in account \npasswordAccount = StellarServer.loadAccount( pairForPassword.publicKey )\n\n// Transform variables (normalized) \nusernameSeed = SHA256(baseIdentity) // as a buffer or array \npairForIdentity = StellarSdk.Keypair.fromRawEd25519Seed( usernameSeed );\n\n// Lookup identity on Stellar network (should NOT exist) \nusernameAccount = StellarServer.loadAccount( pairForIdentity.publicKey )\n\n// Run \"createAccount\" transaction \n// - create account by funding from another account \nfundingAmount = \"5.0\"\ntransaction = StellarSdk.Transaction.createAccount(usernameAccount, passwordAccount, fundingAmount)\n\n// Run \"add multi-sig\" transaction \n// - prevents anyone else from modifying your username data \ntransaction2 = StellarSdk.Transaction.create()\n  .addOperation(StellarSdk.Operation.setOptions({\n    signer: {\n      ed25519PublicKey: pairForPassword.publicKey,\n      weight: 1\n    }\n  }))\n  .addOperation(universe.StellarSdk.Operation.setOptions({\n    masterWeight: 1, // set master key weight \n    lowThreshold: 2, // trustlines\n    medThreshold: 2, // manageData\n    highThreshold: 2  // setOptions \n  }))\n  .build();\n  transaction2.sign(pairForIdentity); \n\n\n\\`\\`\\`\n\n<br />\n<br />\n<br />\n\n`\n\n      // Load partial\n      let headerHtml = `\n        <div class=\"container\">\n          <br />\n          <div class=\"links\">\n            <a href=\"/\">Home</a>\n            &nbsp;|&nbsp;\n            <a href=\"/about\">About</a>\n          </div>\n          <hr />\n        </div>\n      `\n      \n      try {\n        \n        let marked = universe.require('marked');\n        htmlMain1 = marked(md1);\n        htmlMain2 = marked(md2);\n        \n        \n      }catch(err){\n        // marked doesn't exist yet \n        // - requires installation! \n        // - TODO: move to \"dependencies\" on code, install at runtime \n        \n        if(universe.checkPackage('marked').errorInstalling){\n          htmlMain1 = 'FAILED installing package!';\n        } else {\n          htmlMain1 = 'Please wait while packages are installed';\n          \n          (async function(){\n            let installed = await universe.installPackage('marked');\n            if(installed){\n              console.log('Installed!');\n            } else {\n              console.log('Failed installation');\n            }\n          })()\n        }\n        \n      }\n      \n      \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Second</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n              \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n                  \n            ${headerHtml}\n            \n            <div class=\"container\">\n              <div class=\"content\">\n                ${htmlMain1}\n              </div>\n              <div class=\"columns\">\n                <div class=\"column is-12\">\n                  <div class=\"content\">\n                    ${htmlMain2}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}